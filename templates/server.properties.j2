###############################################################################
# kafka configuration
#
# {{ ansible_managed }}
#
###############################################################################


############################# Server Basics ###################################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ kafka_config_broker_id }}

############################# Socket Server Settings #############################

# The port the socket server listens on
port={{ kafka_config_port }}

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
{% if kafka_config_host_name is defined -%}
host.name={{ kafka_config_host_name }}
{% else -%}
# host.name={{ ansible_fqdn }}
{% endif -%}

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
#advertised.host.name=

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port=<port accessible by clients>

# The number of threads handling network requests
num.network.threads={{ kafka_config_num_network_threads }}
 
# The number of threads doing disk I/O
num.io.threads={{ kafka_config_num_io_threads }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ kafka_config_num_recovery_threads_per_data_dir}}

num.replica.fetchers={{ kafka_config_num_replica_fetchers }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ kafka_config_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ kafka_config_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ kafka_config_socket_request_max_bytes }}


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ kafka_config_data_dirs | join(",") }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka_config_num_partitions }}

# default number of replicas
default.replication.factor = {{ kafka_config_default_replication_factor}}

# Create topic automatically if it doesn't exist
auto.create.topics.enable={{ kafka_config_auto_create_topics_enable }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk. 
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks. 
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ kafka_config_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_config_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according 
# to the retention policies
log.retention.check.interval.ms={{ kafka_config_log_retention_check_interval }}

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable={{ kafka_config_log_cleaner_enable }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
{% if zookeeper_hosts is defined -%}
# Cluster ensemble from 'zookeeper_hosts'...
{% set hosts = zookeeper_hosts -%}
{% elif groups['zookeeper_hosts'] is defined %}
# Cluster ensemble from group 'zookeeper_hosts'...
{% set hosts = groups['zookeeper_hosts'] -%}
{% elif zookeeper_hostgroup is defined and groups[zookeeper_hostgroup] is defined %}
# Cluster ensemble from group '{{ zookeeper_hostgroup }}'...
{% set hosts = groups[zookeeper_hostgroup] -%}
{% endif -%}

{% if hosts is defined -%}
zookeeper.connect=
{%- for host in hosts -%}
{%- if hostvars[host]['cluster_interface'] is defined -%}
{%- set key = 'ansible_' + hostvars[host]['cluster_interface'] -%}
{%- set host_ipv4 = hostvars[host][key]['ipv4'] -%}
{%- else -%}
{%- set host_ipv4 = hostvars[host]['ansible_default_ipv4'] -%}
{%- endif -%}
{{ host_ipv4['address'] | default(host) }}:{{ zookeeper_port }}
{%- if not loop.last -%}
,
{%- endif -%}
{%- endfor -%}
{% else -%}
zookeeper.connect=localhost:{{ zookeeper_port }}
{% endif %}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ kafka_config_zookeeper_connection_timeout_ms }}

############################# Other Behavior #############################

# Tells the server to flush and purge files before shutdown - may increase shutdown time
controlled.shutdown.enable = {{ kafka_config_controlled_shutdown_enable }}

delete.topic.enable=true
producer.type=async
compression.codec=gzip
